/**
 * Script para corrigir o problema de conflito entre arquivos .env
 */
const fs = require('fs');
const path = require('path');

// Caminho para os arquivos .env
const rootEnvPath = path.join(__dirname, '..', '.env');
const prismaEnvPath = path.join(__dirname, '..', 'prisma', '.env');
const prismaEnvBackupPath = path.join(__dirname, '..', 'prisma', '.env.backup');

// Fun√ß√£o para ler conte√∫do de um arquivo se ele existir
function readFileIfExists(filePath) {
  if (fs.existsSync(filePath)) {
    return fs.readFileSync(filePath, 'utf8');
  }
  return '';
}

// Fun√ß√£o para mesclar vari√°veis de ambiente
function mergeEnvVars(rootEnv, prismaEnv) {
  const envVars = new Map();
  
  // Processar vari√°veis do arquivo principal
  if (rootEnv) {
    rootEnv.split('\n').forEach(line => {
      if (line.trim() && !line.startsWith('#')) {
        const match = line.match(/^([^=]+)=(.*)$/);
        if (match) {
          envVars.set(match[1], match[2]);
        }
      }
    });
  }
  
  // Adicionar/sobrescrever com vari√°veis do arquivo prisma/.env
  if (prismaEnv) {
    prismaEnv.split('\n').forEach(line => {
      if (line.trim() && !line.startsWith('#')) {
        const match = line.match(/^([^=]+)=(.*)$/);
        if (match) {
          envVars.set(match[1], match[2]);
        }
      }
    });
  }
  
  // Transformar de volta para o formato de arquivo .env
  let result = '# Arquivo .env consolidado\n';
  envVars.forEach((value, key) => {
    result += `${key}=${value}\n`;
  });
  
  return result;
}

try {
  console.log('üîç Verificando arquivos .env...');
  
  // Ler conte√∫do dos arquivos .env
  const rootEnv = readFileIfExists(rootEnvPath);
  const prismaEnv = readFileIfExists(prismaEnvPath);
  
  if (fs.existsSync(prismaEnvPath)) {
    // Fazer backup do arquivo prisma/.env
    console.log('üì¶ Criando backup do arquivo prisma/.env...');
    fs.writeFileSync(prismaEnvBackupPath, prismaEnv);
    
    // Remover o arquivo original para evitar conflitos
    console.log('üóëÔ∏è Removendo arquivo prisma/.env original...');
    fs.unlinkSync(prismaEnvPath);
    
    // Consolidar as vari√°veis de ambiente se n√£o houver arquivo .env na raiz
    if (!fs.existsSync(rootEnvPath)) {
      console.log('‚úèÔ∏è Criando arquivo .env consolidado na raiz...');
      fs.writeFileSync(rootEnvPath, prismaEnv);
    } else {
      console.log('‚ö†Ô∏è O arquivo .env j√° existe na raiz. Verificando necessidade de atualiza√ß√£o...');
      
      // Mesclar vari√°veis de ambiente
      const mergedEnv = mergeEnvVars(rootEnv, prismaEnv);
      fs.writeFileSync(rootEnvPath, mergedEnv);
      console.log('‚úÖ Arquivo .env atualizado com vari√°veis de prisma/.env');
    }
  } else {
    console.log('‚ÑπÔ∏è O arquivo prisma/.env n√£o existe. Nenhuma a√ß√£o necess√°ria.');
  }
  
  console.log('‚úÖ Opera√ß√£o conclu√≠da. Agora voc√™ pode executar `npm run migrate` novamente.');
} catch (error) {
  console.error('‚ùå Ocorreu um erro:', error);
}
