/**
 * Script de limpeza para remover arquivos tempor√°rios e de cache
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Diret√≥rios para limpar
const DIRS_TO_CLEAN = [
  path.join(__dirname, '..', 'uploads'), // Preservar diret√≥rio, mas limpar arquivos
];

// Arquivos para manter nos diret√≥rios limpos
const FILES_TO_KEEP = ['.gitkeep'];

// Limpar diret√≥rios
DIRS_TO_CLEAN.forEach(dir => {
  try {
    // Verificar se o diret√≥rio existe
    if (fs.existsSync(dir)) {
      console.log(`üßπ Limpando diret√≥rio: ${dir}`);

      // Ler o conte√∫do do diret√≥rio
      const files = fs.readdirSync(dir);

      // Excluir arquivos (exceto os que devem ser mantidos)
      files.forEach(file => {
        if (!FILES_TO_KEEP.includes(file)) {
          const filePath = path.join(dir, file);
          console.log(`  - Removendo: ${filePath}`);
          fs.unlinkSync(filePath);
        }
      });
    } else {
      console.log(`‚ö†Ô∏è Diret√≥rio n√£o encontrado: ${dir}`);
      // Criar o diret√≥rio se n√£o existir
      fs.mkdirSync(dir, { recursive: true });
      fs.writeFileSync(path.join(dir, '.gitkeep'), '');
      console.log(`‚úÖ Diret√≥rio criado: ${dir}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao limpar diret√≥rio ${dir}:`, error);
  }
});

// Limpar arquivos do Next.js build
try {
  const frontendDir = path.join(__dirname, '..', '..', '..', 'enigma-crush-frontend-updated', 'frontend_real');
  
  if (fs.existsSync(path.join(frontendDir, '.next'))) {
    console.log('üßπ Limpando diret√≥rio de build do Next.js');
    execSync('rm -rf .next', { cwd: frontendDir });
    console.log('‚úÖ Diret√≥rio de build limpo com sucesso');
  }
} catch (error) {
  console.error('‚ùå Erro ao limpar diret√≥rio de build:', error);
}

console.log('‚ú® Limpeza conclu√≠da!');
